• 배열(array)
① 배열 클래스

      int a[] = new int[10];

: 같은 데이터 타입 한번에 여러개 생성
: 첨자로 한번 크기를 정하면 동적으로 크기 변동불가
: 배열은 객체다.(배열이름이 참조변수이다.)
: 배열끼리 할당은 참조값만 복사이다.

 int[] source = new int[]{1,2,3,4,5}; 
      int[] src = source;                             //참조값만 복사로, 실제 메모리로 접근이 가능하다.
      int[] target = new int[source.length];   //source배열 크기만큼 target배열을 생성한다. 

   ▨배열 메모리를 복사하려면,
   - 부분 배열 복사 : System.arraycopy() 
                        int[] source = new int[]{5, 4, 6, 9, 7, 9};
                        int[] target = {100, 200, 300, 400, 500, 600,700};
                        System.arraycopy(source, 2, target, 3, 4); 
                            //System.arraycopy(원본배열, 원본시작위치, 복사할배열, 복사할배열시작위치, 개수)
                            //여기서 target{100, 200, 300, 400, 6, 9, 7, 9} 이 된다.
                                    
   - 전체 배열 복사 : 배열 자체의 clone()
                        int[] source = new int[]{5, 4, 6, 9, 7, 9}; 
                        int[] target = (int[])source.clone();
                            //clone()은 Object형으로 리턴하므로, int[]형으로 다시 다운캐스팅 해주어야한다.


---------------------------------------------------------------------------------------------------------------------------------


• 컬렉션(collection)
:데이터는 기본적으로 객체만 가능
:다양한 자료구조의 코드 간에 중복 제거(재사용의 최대화)
:계층적 인터페이스 사용 
:인터페이스를 구현한 구체 클래스 제공 

② Set <Interface>
: Set 컬렉션은 저장 순서가 유지되지 않는다. 또한 객체를 중복 저장할 수 없고 null도 단 1개만 저장가능
(구체 클래스 구현)
- HashSet : 가장 기본적인 집합 구현 클래스, 순서가 없다.(랜덤한 것처럼 보임)
- TreeSet : 정렬한 집합
- LinkedHashSet : 들어간 순서를 유지하는 집합
(예제)---------------------------------------------------------------------------------------------------------------------------
Set<Integer> randSet = new HashSet<>();
Collection<Integer> c = new ArrayList<>();

int n=0;
for(int i=0; i<30; i++){
	n = rand.nextInt(30);
	randSet.add(n);			// randSet - 난수집합(중복 X)
	c.add(i);			// c - 제외집합
}
c.removeAll(randSet);
---------------------------------------------------------------------------------------------------------------------------------

③ List <Interface> 
: 저장된 요소들의 순서가 있고 데이터에 중복이 가능하고 인덱스(index) 번호에 의해서 정렬됨

(구체 클래스 구현)
- ArrayList : 배열 형식, 가장 많이 쓰이는 자료구조 (+성능이 가장 좋음)
- Vector : 배열 형태, 동기화, 스레드 안전 (+성능이 arraylist보다 떨어짐)
- LinkedList : 연결리스트 방식, 요소 중간에 추가/삭제할 경우 효율적이다.
- Stack : Vector를 상속, push/pop 기능 제공
(예제)---------------------------------------------------------------------------------------------------------------------------

public static <E> void swap(List<E> a, int i, int j){		// 제너릭 함수
	E tmp = a.get(i);
	a.set(i, a.getIj);
	a.set(j, tmp);
}
public static void shuffle(List<?> list, Random rnd){
	for(int i=list.size(); i>1; i--)
	    swap(list, i-1, nrd.nextInt(i));
}
---------------------------------------------------------------------------------------------------------------------------------

④ Map <Interface>
: Map은 키(key)와 값(value) 쌍의 형태로 이루어져 있으며 보통 검색을 하는 목적으로 많이 사용됩니다.

(구체 클래스)
- HashMap : 기본 해시 맵 구현, 가장 효율적이다.
- TreeMap : 키에 대한 정렬
- LinkedHashMap : 들어간 순서 유지

(예제)----------------------------------------------------------------------------------------------------------------------------
HashMap<Integer, Student> stMap = new HashMap<>();		// HashMap<키, 값>
for(Student st: stList)
     stMap.put(st.id, st);	// 학번으로 학생을 넣어두겠다.
int id = s.nextInt();
Student st1 = stMap.get(id);
public class Freq{		// 빈도조사
    public static void main(String[] args){
	Map<String, Integer> m = new HashMap<String, Integer>();	// MAP<글자, 횟수>
	for(String a: args){
	    Integer freq = m.get(a);
	    m.put(a, (freq == null)? 1: freq+1);
	}
	// m.size는 단어 개수
   }
}
---------------------------------------------------------------------------------------------------------------------------------


Array 와 Collection 차이점
Array는 하나의 자료형만 저장 가능, 컬렉션은 복수의 자료형을 저장할 수 있음
Array는 크기가 고정, Collection은 크기가 가변적
