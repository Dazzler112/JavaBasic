추상 메소드(abstract method)란 자식 클래스에서 반드시 오버라이딩해야만 사용할 수 있는 메소드를 의미한다.
자바에서 추상 메소드를 선언하여 사용하는 목적은 추상 메소드가 포함된 클래스를 상속받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함이다.

예를 들면 모듈처럼 중복되는 부분이나 공통적인 부분은 미리 다 만들어진 것을 사용하고, 
이를 받아 사용하는 쪽에서는 자신에게 필요한 부분만을 재정의하여 사용함으로써 생산성이 향상되고 배포 등이 쉬워지기 때문

이러한 추상 메소드는 선언부만이 존재하며, 구현부는 작성되어 있지 않는다.
바로 이 작성되어 있지 않은 구현부를 자식 클래스에서 오버라이딩하여 사용하는 것임.

자바에서 추상 메소드는 다음과 같은 문법으로 선언한다.

문법)--------------------------------------------------------------------------------------------------------------------------------------------------
abstract 반환타입 메소드이름();
-------------------------------------------------------------------------------------------------------------------------------------------------------
위와 같이 선언부만 있고 구현부가 없다는 의미로 선언부 끝에 바로 세미콜론(;)을 추가한다

추상 클래스(abstract class)
자바에서는 하나 이상의 추상 메소드를 포함하는 클래스를 가리켜 추상 클래스(abstract class)라고 함.
이러한 추상 클래스는 객체 지향 프로그래밍에서 중요한 특징인 다형성을 가지는 메소드의 집합을 정의할 수 있도록 해준다.
즉, 반드시 사용되어야 하는 메소드를 추상 클래스에 추상 메소드로 선언해 놓으면, 
이 클래스를 상속받는 모든 클래스에서는 이 추상 메소드를 반드시 재정의해야 한다.

 
자바에서 추상 클래스는 다음과 같은 문법으로 선언합니다.

문법)--------------------------------------------------------------------------------------------------------------------------------------------------
abstract class 클래스이름 {
    ...
    abstract 반환타입 메소드이름();
    ...

}
-------------------------------------------------------------------------------------------------------------------------------------------------------
이러한 추상 클래스는 동작이 정의되어 있지 않은 추상 메소드를 포함하고 있으므로, 인스턴스를 생성할 수 없음.
추상 클래스는 먼저 상속을 통해 자식 클래스를 만들고, 
만든 자식 클래스에서 추상 클래스의 모든 추상 메소드를 오버라이딩하고 나서야 비로소 자식 클래스의 인스턴스를 생성할 수 있게 된다.


예제)--------------------------------------------------------------------------------------------------------------------------------------------------
abstract class Animal { abstract void cry(); }

class Cat extends Animal { void cry() { System.out.println("냐옹냐옹!"); } }

class Dog extends Animal { void cry() { System.out.println("멍멍!"); } }

public class Polymorphism02 {

    public static void main(String[] args) {

        // Animal a = new Animal(); // 추상 클래스는 인스턴스를 생성할 수 없음.

        Cat c = new Cat();

        Dog d = new Dog(); 


        c.cry();

        d.cry();

    }

}
-------------------------------------------------------------------------------------------------------------------------------------------------------
실행 결과 )--------------------------------------------------------------------------------------------------------------------------------------------
냐옹냐옹!

멍멍!

-------------------------------------------------------------------------------------------------------------------------------------------------------

위의 예제에서 추상 클래스인 Animal 클래스는 추상 메소드인 cry() 메소드를 가지고 있음.
Animal 클래스를 상속받는 자식 클래스인 Dog 클래스와 Cat 클래스는 cry() 메소드를 오버라이딩해야만 비로소 인스턴스를 생성할 수 있음.


추상 메소드의 사용 목적
자바에서 추상 메소드를 선언하여 사용하는 목적은 추상 메소드가 포함된 클래스를 상속받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함임.
만약 일반 메소드로 구현한다면 사용자에 따라 해당 메소드를 구현할 수도 있고, 안 할 수도 있다.
하지만 추상 메소드가 포함된 추상 클래스를 상속받은 모든 자식 클래스는 추상 메소드를 구현해야만 인스턴스를 생성할 수 있으므로, 반드시 구현하게 된다.

즉)
메서드의 내용이 구현 X -> 추상 메서드
추상 메서드를 가지고 있다? -> 추상 클래스

